@model AjudeiMais.Ecommerce.Models.Usuario.UsuarioIndex
@using AjudeiMais.Ecommerce.Tools

@{
	ViewBag.Title = "Meu Dashboard";
	bool temAnuncio = Model.Anuncios != null ? true : false;

	var userGuidLogado = User.FindFirst("GUID")?.Value;
}


@section Styles {
	<link rel="stylesheet" href="~/css/usuario/usuario-index.css" asp-append-version="true" />
}

<!-- Header -->
<header class="header">
	<div class="header-content">
		<h1>Painel de Controle</h1>
		<div class="user-info">
			<span>Bem-vindo, <strong>João Silva</strong></span>
			<div class="user-avatar">
				<i class="fas fa-user"></i>
			</div>
		</div>
	</div>
</header>

<!-- Dashboard Container -->
<div class="dashboard-container">
	<!-- Conteúdo Principal -->
	<main class="main-content">
		<!-- Botão de Anunciar -->
		<section class="announce-section">
			<a href="#" class="announce-button">
				<i class="fas fa-plus-circle"></i>
				Anunciar Novo Item
			</a>
		</section>

		<!-- Métricas -->
		<section class="metrics-section">
			@if (temAnuncio)
			{
				if (Model.Anuncios.Any())
				{
					<div class="metric-card">
						<h3 id="count-anunciados">@Model.Anuncios.Count()</h3>
						<p>Itens Anunciados</p>
					</div>
				}
				if (Model.Anuncios.Any(a => a.Disponivel == false))
				{
					<div class="metric-card">
						<h3 id="count-doados">8</h3>
						<p>Itens Doados</p>
					</div>
				}
			}
			@* <div class="metric-card"> *@
			@* 	<h3 id="count-conversas">5</h3> *@
			@* 	<p>Conversas Ativas</p> *@
			@* </div> *@
			<div class="metric-card">
				<h3 id="count-instituicoes">15</h3>
				<p>Instituições Próximas</p>
			</div>
		</section>

		<!-- Seções de Conteúdo -->
		<a href="@Url.RouteUrl("anuncios", new { guid = userGuidLogado}) " class="metric-btn">
			<span>Meus anúncios</span>
			<i class="fas fa-arrow-right"></i>
		</a>

		@if (temAnuncio)
		{
			<div class="content-sections">
				<!-- Anúncios Ativos -->
				<div class="section-card">
					<div class="section-header">
						<i class="fas fa-bullhorn"></i>
						<h3>Anúncios Ativos</h3>
					</div>
					<div class="active-ads">
						@foreach (var item in Model.Anuncios)
						{
							string imageUrl = "";
							string altText = "Imagem do Produto"; // Texto alternativo padrão

							// Verifica se a lista de imagens existe e se tem pelo menos uma imagem
							if (item.ProdutoImagens != null && item.ProdutoImagens.Any())
							{
								// Se houver imagens, usa a primeira
								imageUrl = Assistant.ServerURL() + item.ProdutoImagens.FirstOrDefault().Imagem;
								// Tenta usar o título do item para o texto alternativo, senão usa o padrão
								altText = !string.IsNullOrEmpty(item.Nome) ? item.Nome : "Imagem do Produto";

								<a href="@Url.RouteUrl("anuncio-detalhe", new { guid = @item.Guid })" style="text-decoration: none !important" class="ad-item">
									<div class="ad-image">
										<img src="@imageUrl" height="60" width="60" alt="Imagem do Produto" />
									</div>
									<div class="ad-details">
										<h4>@item.Nome</h4>
										<p>Publicado há @Assistant.ToTempoAtras((DateTime)item.DataCriacao)</p>
									</div>
									<span class="ad-status status-active">Ativo</span>
								</a>
							}
							else
							{
								<div class="ad-item">
									<div class="ad-image">
										<i class="fa fa-box"></i>
									</div>
									<div class="ad-details">
										<h4>@item.Nome</h4>
										<p>Publicado há @Assistant.ToTempoAtras((DateTime)item.DataCriacao)</p>
									</div>
									<span class="ad-status status-active">Ativo</span>
								</div>
							}
							<div class="ad-item">
								<div class="ad-image">
									<i class="fa fa-box"></i>
								</div>
								<div class="ad-details">
									<h4>@item.Nome</h4>
									<p>Publicado há @Assistant.ToTempoAtras((DateTime)item.DataCriacao)</p>
								</div>
								<span class="ad-status @((bool)item.Disponivel ? "status-active" : "")">@((bool)item.Disponivel ? "Ativo" : "Inativo")</span>
							</div>
						}
					</div>
				</div> <!-- Itens Doados --> <div class=:"section-card">
					<div class="section-header">
						<i class="fas fa-heart"></i>
						<h3>Itens Doados</h3>
					</div>
					<div class="donated-items">
						<div class="ad-item">
							<div class="ad-image">
								<i class="fas fa-laptop"></i>
							</div>
							<div class="ad-details">
								<h4>Notebook Dell</h4>
								<p>Doado para Escola Municipal</p>
							</div>
							<span class="ad-status status-donated">Doado</span>
						</div>
						<div class="ad-item">
							<div class="ad-image">
								<i class="fas fa-utensils"></i>
							</div>
							<div class="ad-details">
								<h4>Utensílios de Cozinha</h4>
								<p>Doado para Casa de Apoio</p>
							</div>
							<span class="ad-status status-donated">Doado</span>
						</div>
						<div class="ad-item">
							<div class="ad-image">
								<i class="fas fa-chair"></i>
							</div>
							<div class="ad-details">
								<h4>Móveis de Escritório</h4>
								<p>Doado para ONG Esperança</p>
							</div>
							<span class="ad-status status-donated">Doado</span>
						</div>
					</div>
				</div>
			</div>
		}
		<!-- Mapa de Instituições -->
		<div class="section-card">
			<div class="section-header">
				<i class="fas fa-map-marker-alt"></i>
				<h3>Instituições Próximas</h3>
			</div>
			<div class="institutions-map">
				<div class="map-placeholder">
					<i class="fas fa-map"></i>
					<p>Mapa interativo das instituições próximas</p>
					<small>Clique para ver localização detalhada</small>
				</div>
				<div class="institution-markers">
					<div class="marker" style="top: 20%; left: 25%;"></div>
					<div class="marker" style="top: 40%; left: 60%;"></div>
					<div class="marker" style="top: 65%; left: 30%;"></div>
					<div class="marker" style="top: 75%; left: 70%;"></div>
					<div class="marker" style="top: 35%; left: 80%;"></div>
				</div>
			</div>
		</div>
	</main>

	<!-- Sidebar de Chat -->
	@* <aside class="chat-sidebar"> *@
	@* 	<div class="chat-header"> *@
	@* 		<i class="fas fa-comment-dots"></i> *@
	@* 		<h3>Conversas Ativas</h3> *@
	@* 	</div> *@
	@* 	<div class="chat-contacts" id="chatContacts"> *@
	@* 		<div class="contact-item active"> *@
	@* 			<div class="contact-avatar"> *@
	@* 				<i class="fas fa-user"></i> *@
	@* 			</div> *@
	@* 			<div class="contact-info"> *@
	@* 				<h4>Maria Silva</h4> *@
	@* 				<p>Interessada no livro de matemática</p> *@
	@* 				<small>2 min atrás</small> *@
	@* 			</div> *@
	@* 			<div class="contact-status"> *@
	@* 				<span class="unread-count">2</span> *@
	@* 			</div> *@
	@* 		</div> *@

	@* 		<div class="contact-item"> *@
	@* 			<div class="contact-avatar"> *@
	@* 				<i class="fas fa-user"></i> *@
	@* 			</div> *@
	@* 			<div class="contact-info"> *@
	@* 				<h4>João Santos</h4> *@
	@* 				<p>Quer os brinquedos educativos</p> *@
	@* 				<small>1 hora atrás</small> *@
	@* 			</div> *@
	@* 		</div> *@

	@* 		<div class="contact-item"> *@
	@* 			<div class="contact-avatar"> *@
	@* 				<i class="fas fa-user"></i> *@
	@* 			</div> *@
	@* 			<div class="contact-info"> *@
	@* 				<h4>Ana Costa</h4> *@
	@* 				<p>Perguntou sobre as roupas</p> *@
	@* 				<small>3 horas atrás</small> *@
	@* 			</div> *@
	@* 			<div class="contact-status"> *@
	@* 				<span class="unread-count">1</span> *@
	@* 			</div> *@
	@* 		</div> *@

	@* 		<div class="contact-item"> *@
	@* 			<div class="contact-avatar"> *@
	@* 				<i class="fas fa-building"></i> *@
	@* 			</div> *@
	@* 			<div class="contact-info"> *@
	@* 				<h4>Escola Municipal</h4> *@
	@* 				<p>Agradeceu pela doação do notebook</p> *@
	@* 				<small>1 dia atrás</small> *@
	@* 			</div> *@
	@* 		</div> *@

	@* 		<div class="contact-item"> *@
	@* 			<div class="contact-avatar"> *@
	@* 				<i class="fas fa-heart"></i> *@
	@* 			</div> *@
	@* 			<div class="contact-info"> *@
	@* 				<h4>Casa de Apoio</h4> *@
	@* 				<p>Confirmou retirada dos utensílios</p> *@
	@* 				<small>2 dias atrás</small> *@
	@* 			</div> *@
	@* 		</div> *@
	@* 	</div> *@
	@* </aside> *@
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Animação de valores para as métricas
		// Os valores iniciais são agora lidos diretamente do DOM, preenchidos pela sua Model.
		const stats = {
			anunciados: parseInt(document.getElementById('count-anunciados')?.textContent) || 0,
			doados: parseInt(document.getElementById('count-doados')?.textContent) || 0,
			conversas: parseInt(document.getElementById('count-conversas')?.textContent) || 0,
			instituicoes: parseInt(document.getElementById('count-instituicoes')?.textContent) || 0
		};

		function animateValue(id, end, duration = 1500) {
			const el = document.getElementById(id);
			if (!el) return;

			let start = 0; // A animação sempre começa do zero para um efeito de contagem ascendente
			const startTime = performance.now();
			const easeOutCubic = t => 1 - Math.pow(1 - t, 3); // Função de easing para suavizar a animação

			function step(timestamp) {
				const progress = (timestamp - startTime) / duration;
				const easedProgress = easeOutCubic(Math.min(progress, 1)); // Garante que o progresso não exceda 1
				const value = Math.floor(easedProgress * end);
				el.textContent = value; // Atualiza o texto do elemento

				if (progress < 1) {
					requestAnimationFrame(step); // Continua a animação
				} else {
					el.textContent = end; // Garante que o valor final seja o exato 'end'
				}
			}

			requestAnimationFrame(step); // Inicia a animação
		}

		// Fade-in sequencial dos cards de métricas e inicia a animação dos valores
		// Esta parte garante que cada card apareça e seu número anime em sequência.
		document.querySelectorAll('.metric-card').forEach((card, i) => {
			const id = card.querySelector('h3').id; // Obtém o ID do <h3> dentro do card
			let targetValue = 0;

			// Define o valor alvo correto com base no ID do card
			if (id === 'count-anunciados') {
				targetValue = stats.anunciados;
			} else if (id === 'count-doados') {
				targetValue = stats.doados;
			} else if (id === 'count-conversas') {
				targetValue = stats.conversas;
			} else if (id === 'count-instituicoes') {
				targetValue = stats.instituicoes;
			}

			// Define um atraso para cada card
			setTimeout(() => {
				card.classList.add('visible'); // Adiciona classe para o efeito de fade-in (via CSS)
				animateValue(id, targetValue, 1500); // Inicia a animação do valor
			}, i * 150 + 200); // Atraso sequencial para cada card e animação
		});

		// Chat de contatos interativo
		const chatContacts = document.getElementById('chatContacts');

		// Verifica se o elemento chatContacts existe antes de adicionar o event listener
		if (chatContacts) {
			chatContacts.addEventListener('click', (e) => {
				const contactItem = e.target.closest('.contact-item');
				if (contactItem) {
					// Remove a classe 'active' de todos os contatos
					document.querySelectorAll('.contact-item').forEach(item => {
						item.classList.remove('active');
					});

					// Adiciona a classe 'active' ao contato clicado
					contactItem.classList.add('active');

					// Remove o badge de mensagens não lidas, se existir
					const unreadBadge = contactItem.querySelector('.unread-count');
					if (unreadBadge) {
						unreadBadge.remove();
					}

					// Ação para abrir a conversa específica
					const contactName = contactItem.querySelector('h4').textContent;
					console.log(`Abrindo conversa com: ${contactName}`);
					// Em uma implementação real, você carregaria as mensagens desta conversa aqui.
				}
			});
		}

		// Interação com o mapa (placeholder)
		const institutionsMap = document.querySelector('.institutions-map');
		if (institutionsMap) {
			institutionsMap.addEventListener('click', () => {
				alert('Aqui seria integrado um mapa interativo (Google Maps, Leaflet, etc.) mostrando as instituições próximas.');
			});
		}
	});
</script>