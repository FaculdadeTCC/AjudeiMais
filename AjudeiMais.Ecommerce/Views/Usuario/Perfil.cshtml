@model AjudeiMais.Ecommerce.Models.Usuario.UsuarioPerfilModel
@using AjudeiMais.Ecommerce.Tools

@{
    ViewBag.Title = "Meu Perfil";

    var userGuidLogado = User.FindFirst("GUID").Value;

    bool isMeuPerfil = userGuidLogado.ToString() == Model.GUID;

    ViewData["Title"] = isMeuPerfil
        ? "Meu Perfil - " + Model.NomeCompleto
        : Model.NomeCompleto + " - Perfil";
}


@section Styles {
    <link rel="stylesheet" href="~/css/usuario/usuario-perfil.css" asp-append-version="true" />
}

@{
    await Html.RenderPartialAsync("_Alertas");
}

<style>
    .quick-action-btn {
        background: white;
        border: none;
        color: #444;
        padding: 6px 10px;
        border-radius: 8px;
        transition: transform 0.2s ease;
        cursor: pointer;
        font-size: 16px;
    }

        .quick-action-btn:hover {
            transform: scale(1.1) rotate(5deg);
            color: #0077ff;
        }

</style>
<section class="hero-profile">
    <div class="py-5 container">
        <div class="row align-items-center">
            <!-- Avatar e Badge -->
            <div class="col-md-auto mb-4 mb-md-0 text-center">
                <div class="profile-avatar mx-auto">
                    <img src="@Assistant.ServerURL()@Model.FotoDePerfil" alt="@Model.NomeCompleto">
                </div>
            </div>

            <!-- Informações do Perfil -->
            <div class="col-md">
                <div class="profile-info">
                    <h1 class="fade-in">@Model.NomeCompleto</h1>

                    <div class="profile-location fade-in">
                        <i class="fas fa-map-marker-alt me-2"></i>
                        @Model.Cidade, @Model.Estado
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Model.Telefone))
                    {
                        <div class="profile-contact fade-in" style="display: flex; gap: 5px;">
                            <i style="color: #FFF !important" class="fas fa-mobile-alt me-2"></i>
                            <p style="color: #FFF !important">@Assistant.FormatarTelefone(Model.Telefone)</p>
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model.TelefoneFixo))
                    {
                        <div class="profile-contact fade-in" style="display: flex; gap: 5px;">
                            <i style="color: #FFF !important" class="fas fa-phone me-2"></i>
                            <p style="color: #FFF !important">@Assistant.FormatarTelefone(Model.TelefoneFixo)</p>

                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model.Email))
                    {
                        <div class="profile-contact fade-in" >
                            <i style="color: #FFF !important" class="fas fa-envelope me-2"></i>
                            <a style="text-decoration: none !important; color: #fff !important" href="mailto:@Model.Email">@Model.Email</a>
                        </div>
                    }
                </div>
            </div>

        </div>
    </div>
</section>


<!-- SEÇÃO PRINCIPAL DE PRODUTOS -->
<div class="container">
    <!-- SEÇÃO DE ESTATÍSTICAS -->
    <section class="statistics-section slide-up">
        <div class="row g-4 mb-5">
            <div class="col-md-3 col-sm-6">
                <div class="stat-card text-center">
                    <div class="stat-icon">
                        <i class="fas fa-gift"></i>
                    </div>
                    <div class="stat-number">@(Model.Produtos != null ? Model.Produtos.Count() : 0)</div>
                    <div class="stat-label">Itens Anunciados</div>
                </div>
            </div>
            @if (Model.DataCriacao != null)
            {
                <div class="col-md-3 col-sm-6">
                    <div class="stat-card text-center">
                        <div class="stat-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <div class="stat-number">@Assistant.ToTempoAtras((DateTime)Model.DataCriacao)</div>
                        <div class="stat-label">Tempo de Atividade</div>
                    </div>
                </div>
            }

            @if (Model.Produtos != null && Model.Produtos.Any())
            {

                <section class="products-section slide-up">
                    <!-- Header da Seção -->
                    <div class="section-header">
                        <h2 class="section-title">
                            <i class="fas fa-heart me-3 text-danger"></i>
                            Produtos Disponíveis para Doação
                        </h2>
                    </div>

                    <!-- Grid de Produtos -->
                    <div class="row g-4 mb-5" id="product-list">
                        @foreach (var item in Model.Produtos)
                        {
                            var imagemPrincipal = item.ProdutoImagens?
                            .FirstOrDefault(img => img.IsPrincipal) // Se tiver campo "Principal"
                            ?? item.ProdutoImagens?.FirstOrDefault(); // Senão, pega a primeira imagem qualquer

                            var imagemUrl = imagemPrincipal != null
                            ? Assistant.ServerURL() + imagemPrincipal.Imagem
                            : "https://via.placeholder.com/400x300";

                            <div class="col-lg-3 col-md-4 col-sm-6 product-card-wrapper">
                                <div class="product-card interactive-element">
                                    <div class="product-image-container">
                                        <img src="@imagemUrl" class="product-image" alt="@item.Nome" />

                                        <!-- Badge de status -->
                                        <div class="status-badge status-@((bool)item.Disponivel ? "available" : "unavailable")">
                                            <i class="fas @((bool)item.Disponivel ? "fa-check-circle" : "fa-times-circle") me-1"></i>
                                            @((bool)item.Disponivel ? "Disponível" : "Indisponível")
                                        </div>
                                    </div>

                                    <div class="product-content">
                                        <div class="product-category">
                                            @item.Categorias?.FirstOrDefault(c => c.CategoriaProduto_ID == item.CategoriaProduto_ID)?.Nome
                                        </div>
                                        <h3 class="product-title">@item.Nome</h3>
                                        <div class="product-meta">
                                            <div class="meta-item">
                                                <i class="fas fa-boxes meta-icon"></i>
                                                <span>@item.Quantidade unidade(s)</span>
                                            </div>
                                            <div class="meta-item">
                                                <i class="fas fa-clock meta-icon"></i>
                                                <span>@Assistant.CalcularTempoAtivo((DateTime)item.DataCriacao)</span>
                                            </div>
                                        </div>
                                            <a class="product-cta btn-ver-anuncio mt-2" href="@Url.RouteUrl("anuncio-detalhe", new { guid = item.Guid })">
                                            <i class="fas fa-eye me-2"></i>
                                            Ver Anúncio
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Paginação com jQuery -->
                    <nav class="modern-pagination text-center" aria-label="Paginação">
                        <ul class="pagination justify-content-center" id="pagination"></ul>
                    </nav>
                </section>
            }
        </div>
    </section>
</div>
<script async src="https://static.addtoany.com/menu/page.js"></script>
<script>
    // Inicialização de tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Sistema de filtros inteligentes
    const filterChips = document.querySelectorAll('.filter-chip');
    const productCards = document.querySelectorAll('.product-card');

    filterChips.forEach(chip => {
        chip.addEventListener('click', function() {
            // Remove active de todos os chips
            filterChips.forEach(c => c.classList.remove('active'));
            // Adiciona active ao chip clicado
            this.classList.add('active');

            const filter = this.textContent.toLowerCase();

            // Anima os cards
            productCards.forEach(card => {
                card.style.transition = 'all 0.3s ease';
                if (filter === 'todos') {
                    card.style.display = 'block';
                    card.style.opacity = '1';
                    card.style.transform = 'scale(1)';
                } else {
                    // Aqui você implementaria a lógica de filtro baseada nos dados
                    card.style.opacity = '0.3';
                    card.style.transform = 'scale(0.95)';

                    setTimeout(() => {
                        if (filter !== 'todos') {
                            // Simula filtro - em produção, usaria dados reais
                            if (Math.random() > 0.5) {
                                card.style.display = 'none';
                            }
                        }
                    }, 150);
                }
            });

            // Reexibe todos os cards após um tempo
            if (filter === 'todos') {
                setTimeout(() => {
                    productCards.forEach(card => {
                        card.style.display = 'block';
                        card.style.opacity = '1';
                        card.style.transform = 'scale(1)';
                    });
                }, 100);
            }
        });
    });

    // Animação de entrada dos elementos
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observa elementos para animação
    document.querySelectorAll('.slide-up').forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });

    // Efeito de hover nos quick action buttons
    document.querySelectorAll('.quick-action-btn').forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1) rotate(5deg)';
        });

        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
        });
    });

    // Animação de clique nos botões interativos
    document.querySelectorAll('.interactive-element').forEach(element => {
        element.addEventListener('mousedown', function() {
            this.style.transform = 'scale(0.98)';
        });

        element.addEventListener('mouseup', function() {
            this.style.transform = 'scale(1)';
        });

        element.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });

    // Sistema de favoritos
    document.querySelectorAll('.quick-action-btn').forEach(btn => {
        if (btn.querySelector('.fa-heart')) {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const icon = this.querySelector('i');

                if (icon.classList.contains('fas')) {
                    icon.classList.remove('fas');
                    icon.classList.add('far');
                    this.style.color = 'var(--color-gray-700)';
                } else {
                    icon.classList.remove('far');
                    icon.classList.add('fas');
                    this.style.color = '#ef4444';

                    // Animação de coração
                    this.style.animation = 'pulse 0.3s ease';
                    setTimeout(() => {
                        this.style.animation = '';
                    }, 300);
                }
            });
        }
    });
</script>
